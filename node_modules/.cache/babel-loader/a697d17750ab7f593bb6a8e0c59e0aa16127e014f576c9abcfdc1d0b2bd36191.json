{"ast":null,"code":"import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n    super.setPositions(points);\n    return this;\n  }\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n    super.setColors(colors);\n    return this;\n  }\n  setFromPoints(points) {\n    // converts a vector3 or vector2 array to pairs format\n\n    const length = points.length - 1;\n    const positions = new Float32Array(6 * length);\n    for (let i = 0; i < length; i++) {\n      positions[6 * i] = points[i].x;\n      positions[6 * i + 1] = points[i].y;\n      positions[6 * i + 2] = points[i].z || 0;\n      positions[6 * i + 3] = points[i + 1].x;\n      positions[6 * i + 4] = points[i + 1].y;\n      positions[6 * i + 5] = points[i + 1].z || 0;\n    }\n    super.setPositions(positions);\n    return this;\n  }\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n\n    // set colors, maybe\n\n    return this;\n  }\n}\nexport { LineGeometry };","map":{"version":3,"names":["LineSegmentsGeometry","LineGeometry","constructor","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","setFromPoints","positions","x","y","z","fromLine","line","geometry","attributes","position"],"sources":["/home/logan-lapierre/Desktop/personal_projects/lupenox-systems/node_modules/three/examples/jsm/lines/LineGeometry.js"],"sourcesContent":["import { LineSegmentsGeometry } from '../lines/LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isLineGeometry = true;\n\n\t\tthis.type = 'LineGeometry';\n\n\t}\n\n\tsetPositions( array ) {\n\n\t\t// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst points = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tpoints[ 2 * i ] = array[ i ];\n\t\t\tpoints[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tpoints[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tpoints[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tpoints[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tpoints[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setPositions( points );\n\n\t\treturn this;\n\n\t}\n\n\tsetColors( array ) {\n\n\t\t// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n\n\t\tconst length = array.length - 3;\n\t\tconst colors = new Float32Array( 2 * length );\n\n\t\tfor ( let i = 0; i < length; i += 3 ) {\n\n\t\t\tcolors[ 2 * i ] = array[ i ];\n\t\t\tcolors[ 2 * i + 1 ] = array[ i + 1 ];\n\t\t\tcolors[ 2 * i + 2 ] = array[ i + 2 ];\n\n\t\t\tcolors[ 2 * i + 3 ] = array[ i + 3 ];\n\t\t\tcolors[ 2 * i + 4 ] = array[ i + 4 ];\n\t\t\tcolors[ 2 * i + 5 ] = array[ i + 5 ];\n\n\t\t}\n\n\t\tsuper.setColors( colors );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\t// converts a vector3 or vector2 array to pairs format\n\n\t\tconst length = points.length - 1;\n\t\tconst positions = new Float32Array( 6 * length );\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tpositions[ 6 * i ] = points[ i ].x;\n\t\t\tpositions[ 6 * i + 1 ] = points[ i ].y;\n\t\t\tpositions[ 6 * i + 2 ] = points[ i ].z || 0;\n\n\t\t\tpositions[ 6 * i + 3 ] = points[ i + 1 ].x;\n\t\t\tpositions[ 6 * i + 4 ] = points[ i + 1 ].y;\n\t\t\tpositions[ 6 * i + 5 ] = points[ i + 1 ].z || 0;\n\n\t\t}\n\n\t\tsuper.setPositions( positions );\n\n\t\treturn this;\n\n\t}\n\n\tfromLine( line ) {\n\n\t\tconst geometry = line.geometry;\n\n\t\tthis.setPositions( geometry.attributes.position.array ); // assumes non-indexed\n\n\t\t// set colors, maybe\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { LineGeometry };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}